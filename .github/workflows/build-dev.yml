name: build-dev

on:
  push:
    paths:
    - 'gpkg-dev/**'

jobs:
  build-1:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: [aarch64, armv7]
    name: build
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: build
        with:
          arch: ${{ matrix.target_arch }}
          distro: archarm_latest
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/builder"
          dockerRunArgs: |
            --volume "${PWD}/builder:/builder"
          install: |
            pacman -Syu --noconfirm
            pacman -S base-devel python git cmake python-setuptools ruby-ronn publicsuffix-list gtk-doc autoconf-archive gtest rsync ninja openssl --noconfirm --needed
          run: |
            useradd -m user-build
            mkdir -p /data/data/com.termux/files/usr/glibc
            ln -s /lib /data/data/com.termux/files/usr/glibc/lib
            ln -s /usr/share /data/data/com.termux/files/usr/glibc/share
            cd /home/user-build
            git config --global --add safe.directory '*'
            sudo -H -u user-build bash -c "git clone https://github.com/termux-pacman/glibc-packages"
            cd glibc-packages/gpkg-dev
            build_pkg="|"
            for j in $(git show --pretty="" --name-only ${{ github.sha }}); do
              jl=(${j//// })
              if [[ "${jl[0]}" = "gpkg-dev" && ! $(echo "$build_pkg" | grep "|${jl[1]}|") && -d "${jl[1]}" ]]; then
                cd "${jl[1]}"
                if [[ -f key-gpg.info ]]; then
                  for i in $(cat key-gpg.info); do
                    sudo -H -u user-build bash -c "gpg --recv-keys ${i}"
                  done
                fi
                sudo -H -u user-build bash -c 'timeout --preserve-status 300m makepkg || ([ "$?" = "143" ] && true)'
                mkdir pkgs
                if $(ls *.pkg.* &> /dev/null); then
                  mv *.pkg.* pkgs
                  tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
                  mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
                  build_pkg+="${jl[1]}|"
                  cd ..
                else
                  mv src pkgs
                  tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
                  mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
                  break
                fi
              fi
            done
      - uses: actions/upload-artifact@v3
        with:
          name: build-1-gpkg-dev-${{ matrix.target_arch }}
          path: "./builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz"
          if-no-files-found: error
  build-2:
    runs-on: ubuntu-latest
    needs: build-1
    strategy:
      matrix:
        target_arch: [aarch64, armv7]
    name: build
    steps:
      - uses: actions/checkout@v3
      - name: Create dir builder
        run: |
          mkdir -p ./builder
      - name: Get packages
        uses: actions/download-artifact@v3
        with:
          name: build-1-gpkg-dev-${{ matrix.target_arch }}
          path: ./builder
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: build
        with:
          arch: ${{ matrix.target_arch }}
          distro: archarm_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/builder:/builder"
          install: |
            pacman -Syu --noconfirm
            pacman -S base-devel python git cmake python-setuptools ruby-ronn publicsuffix-list gtk-doc autoconf-archive gtest rsync ninja openssl --noconfirm --needed
          run: |
            useradd -m user-build
            mkdir -p /data/data/com.termux/files/usr/glibc
            ln -s /lib /data/data/com.termux/files/usr/glibc/lib
            ln -s /usr/share /data/data/com.termux/files/usr/glibc/share
            cd /home/user-build
            git config --global --add safe.directory '*'
            sudo -H -u user-build bash -c "git clone https://github.com/termux-pacman/glibc-packages"
            cd glibc-packages/gpkg-dev
            build_pkg="|"
            for j in $(git show --pretty="" --name-only ${{ github.sha }}); do
              jl=(${j//// })
              if [[ "${jl[0]}" = "gpkg-dev" && ! $(echo "$build_pkg" | grep "|${jl[1]}|") && -d "${jl[1]}" ]]; then
                cd "${jl[1]}"
                if [[ -f key-gpg.info ]]; then
                  for i in $(cat key-gpg.info); do
                    sudo -H -u user-build bash -c "gpg --recv-keys ${i}"
                  done
                fi
                tar xJf /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz -C .
                if ! $(ls pkgs/*.pkg.* &> /dev/null); then
                  mv pkgs/* .
                  sudo -H -u user-build bash -c 'timeout --preserve-status 300m makepkg -e || ([ "$?" = "143" ] && true)'
                  if $(ls *.pkg.* &> /dev/null); then
                    mv *.pkg.* pkgs
                    tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
                    rm /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz
                    mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
                    build_pkg+="${jl[1]}|"
                    cd ..
                  else
                    mv src pkgs
                    tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
                    rm /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz
                    mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
                    break
                  fi
                fi
              fi
            done
      - uses: actions/upload-artifact@v3
        with:
          name: build-2-gpkg-dev-${{ matrix.target_arch }}
          path: "./builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz"
          if-no-files-found: error
  build-3:
    runs-on: ubuntu-latest
    needs: build-2
    strategy:
      matrix:
        target_arch: [aarch64, armv7]
    name: build
    steps:
      - uses: actions/checkout@v3
      - name: Create dir builder
        run: |
          mkdir -p ./builder
      - name: Get packages
        uses: actions/download-artifact@v3
        with:
          name: build-2-gpkg-dev-${{ matrix.target_arch }}
          path: ./builder
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: build
        with:
          arch: ${{ matrix.target_arch }}
          distro: archarm_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/builder:/builder"
          install: |
            pacman -Syu --noconfirm
            pacman -S base-devel python git cmake python-setuptools ruby-ronn publicsuffix-list gtk-doc autoconf-archive gtest rsync ninja openssl --noconfirm --needed
          run: |
            useradd -m user-build
            mkdir -p /data/data/com.termux/files/usr/glibc
            ln -s /lib /data/data/com.termux/files/usr/glibc/lib
            ln -s /usr/share /data/data/com.termux/files/usr/glibc/share
            cd /home/user-build
            git config --global --add safe.directory '*'
            sudo -H -u user-build bash -c "git clone https://github.com/termux-pacman/glibc-packages"
            cd glibc-packages/gpkg-dev
            build_pkg="|"
            for j in $(git show --pretty="" --name-only ${{ github.sha }}); do
              jl=(${j//// })
              if [[ "${jl[0]}" = "gpkg-dev" && ! $(echo "$build_pkg" | grep "|${jl[1]}|") && -d "${jl[1]}" ]]; then
                cd "${jl[1]}"
                if [[ -f key-gpg.info ]]; then
                  for i in $(cat key-gpg.info); do
                    sudo -H -u user-build bash -c "gpg --recv-keys ${i}"
                  done
                fi
                tar xJf /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz -C .
                if ! $(ls pkgs/*.pkg.* &> /dev/null); then
                  mv pkgs/* .
                  sudo -H -u user-build bash -c "makepkg -e"
                  mv *.pkg.* pkgs
                  tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
                  rm /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz
                  mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
                  build_pkg+="${jl[1]}|"
                  cd ..
                fi
              fi
            done
      - uses: actions/upload-artifact@v3
        with:
          name: gpkg-dev-${{ matrix.target_arch }}
          path: "./builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz"
          if-no-files-found: error
  upload:
    if: github.event_name != 'pull_request'
    needs: build-3
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        path: ./
    - name: Install aws-cli
      run: |
        git clone https://github.com/termux-pacman/aws-cli-action.git
        ./aws-cli-action/setup.sh '${{ secrets.AWS_ACCESS_KEY_ID }}' '${{ secrets.AWS_ACCESS_KEY }}' '${{ secrets.AWS_REGION }}'
    - name: Import GPG key
      run: |
        echo '${{ secrets.SF_GPG_BOT }}' > key.gpg
        gpg --pinentry-mode=loopback --passphrase '${{ secrets.PW_GPG_BOT }}' --import key.gpg > /dev/null
        rm key.gpg
    - name: Uploading packages to aws
      run: |
        #source ./aws-cli-action/func.sh
        for path_to_archive in gpkg-dev-*/gpkg-dev-{aarch64,armv7}.tar.xz; do
          archive="${path_to_archive##*/}"
          arch=$(echo ${archive##*-} | sed 's/.tar.xz//; s/armv7/arm/')
          tar xJf "$path_to_archive"
          for pkg in pkgs/*.pkg.*; do
            gpg --batch --pinentry-mode=loopback --passphrase '${{ secrets.PW_GPG_BOT }}' --detach-sign --use-agent -u '${{ secrets.KEY_GPG_BOT }}' --no-armor "$pkg"
            for format_file in "" ".sig"; do
              aws s3 cp "${pkg}${format_file}" s3://'${{ secrets.SFPU }}'/gpkg-dev/$arch/"${pkg##*/}${format_file}"
            done
          done
          rm -fr pkgs
        done
